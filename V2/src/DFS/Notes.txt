http://www.cs.yale.edu/homes/aspnes/pinewiki/DepthFirstSearch.html
 

DFS in Tree 
    TreeDFS(root):
        // do anything we need to do when first visiting the root
        for each child of root:
        TreeDFS(child)

    Start and departure time 
        TreeTimes(root):
            start[root] = clock; clock = clock + 1
            for each child of root:
            TreeTimes(child)
            end[root] = clock; clock = clock + 1

    The rule is that if x is a descendant of y, then start[y] < start[x] < end[x] < end[y]

    TreeMakeBackPointers(root, parent):
        parent[root] = parent
        for each child of root:
        TreeMakeBackPointers(child, root)


DFS in directed graph 
    DFS(u):
        visited[u] = true
        for each successor v of u:
            if not visited[v]:
            DFS(v)

    AnnotatedDFS(u, parent):
        parent[u] = parent
         start[u] = clock; clock = clock + 1
          visited[u] = true
        for each successor v of u:
         if not visited[v]:
            AnnotatedDFS(v, u)
            end[u] = clock; clock = clock + 1


            Edge type of uv         start times             end times

             Tree edge          start[u] < start[v]         end[u] > end[v]
             Back edge          start[u] > start[v]         end[u] < end[v]
             Forward edge       start[u] < start[v]         end[u] > end[v]
             Cross edge         start[u] > start[v]         end[u] > end[v]